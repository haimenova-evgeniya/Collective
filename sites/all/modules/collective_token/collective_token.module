<?php

/**
 * Implements hook_token_info().
*/
function collective_token_token_info() {
  // Collective specific token.
  $collective['user_path_by_role'] = array(
    'name' => t("User path by Role"),
    'description' => t("The path to the user of the specific role."),
  );  
  return array(
    'tokens' => array(
      'user' => $collective,
    ),
  );
}

/**
 * Implements hook_tokens().
*/
function collective_token_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array(); 
  if ($type == 'user') { 
    if (isset($tokens['user_path_by_role'])) {
      if (user_permission_access('premium permission', $data['user'])) {
        $replacements['[user:user_path_by_role]'] = "premium";
      }
      else {
        $replacements['[user:user_path_by_role]'] = "common";
      }       
    }    
  }
  return $replacements;
}

/**
 * Implements hook_permission().
*/
function collective_token_permission() {
  return array(
    // permission to the premium account
    'premium permission' => array(
      'title' => t('Permission to the premium account'), 
      'description' => t('Perform premium actions.'),
    ),
  );
}

/**
 * Determine whether the user has a given privilege
*/
function user_permission_access($string, $account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  // User #1 has all privileges:
  if ($account->uid == 1) {
    return TRUE;
  }
  // To reduce the number of SQL queries, we cache the user's permissions
  // in a static variable.
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['perm'] = &drupal_static(__FUNCTION__);
  }
  $perm = &$drupal_static_fast['perm'];
  if (!isset($perm[$account->uid])) {
    $role_permissions = user_role_permissions($account->roles);
    $perms = array();
    foreach ($role_permissions as $one_role) {
      $perms += $one_role;
    }
    $perm[$account->uid] = $perms;    
  }
  return isset($perm[$account->uid][$string]);
}